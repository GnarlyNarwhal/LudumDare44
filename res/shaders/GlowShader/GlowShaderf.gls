/*******************************************************************************
 *
 * Copyright (c) 2018 Gnarly Narwhal
 *
 * -----------------------------------------------------------------------------
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files(the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 *******************************************************************************/

#version 330 core

uniform vec2 resolution;
uniform sampler2D tex;
uniform sampler2D background;
uniform bool horizontal = true;
uniform float brightness = 0.55;
uniform float distance = 15.0;

in vec2 texCoords;

layout (location = 0) out vec4 color;


void main() {
	vec2 pixel = 1.0 / resolution;
	int numPixels = int(distance * resolution.y / 1080.0);
	float weight = 1.0 / numPixels;
	vec2 transform = vec2(pixel.x * int(horizontal), pixel.y * int(!horizontal));
	color = texture(tex, texCoords);
	vec3 result = texture(tex, texCoords).rgb * weight;
	for(int i = 1; i < numPixels; ++i) {
		result += texture(tex, texCoords + transform * i).rgb * weight;
		result += texture(tex, texCoords - transform * i).rgb * weight;
	}
	color.rgb = mix(result, texture(background, vec2(texCoords.x, 1.0 - texCoords.y)).rgb, 1 - brightness);
}
